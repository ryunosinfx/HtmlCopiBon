{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/util/binaryConverter.js","webpack:///./src/util/image/byteUtil.js","webpack:///./src/util/thread/thread.js","webpack:///./src/worker/baseWorker.js","webpack:///./src/worker/imageWorker.js","webpack:///./src/worker/WASMcaller.js","webpack:///./src/worker.js","webpack:///./src/util/image/imageMerger.js","webpack:///./src/util/image/imageCalcBase.js","webpack:///./src/util/image/imageResizer.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","BinaryConverter","[object Object]","binaryString","binaryString2Uint8Array","buffer","uint8Array2BinaryString","Uint8Array","btoa","type","arrayBuffer2BinaryString","split","rawLength","length","array","ArrayBuffer","charCodeAt","u8a","retList","e","push","String","fromCharCode","join","base64","atob","binaryString2ArrayBuffer","dataURI","uintArray","arrayBuffer","Uint16Array","Uint32Array","val","Blob","blob","reader","FileReader","promise","Promise","resolve","reject","onload","eve","result","onerror","error","asArrayBuffer","readAsArrayBuffer","asBinaryString","readAsBinaryString","asDataURL","readAsDataURL","asText","readAsText","ByteUtil","byteX","x","Math","floor","maxByte","Thread","defaultWorker","workerJsPath","this","worker","Worker","dataMap","transObject","tranceArray","buildPostObj","postMessage","onmessage","event","returendData","data","console","log","currentTarget","returnValue","srcElement","target","eventPhase","timeStamp","message","lineno","stack","buildPostObjExec","Array","isArray","count","buildPostObjExecParValue","keys","objKey","undefined","currentKey","isNotObject","byteLength","ImageData","terminate","workers","Map","DEFAULT_WORKER","BaseWorker","has","set","srcData","msg","Date","now","imageWorker_key","super","im","imageMerger","ir","imageResizer","classes","getClassName","catch","className","methodName","instance","erroe","cache","aWASMcaller","response","fetch","bytes","WebAssembly","instantiate","sum","worker_DefaultWorker","getWorkerInstance","execute","then","workerResult","thread","ImageMerger","_imageCalcBase__WEBPACK_IMPORTED_MODULE_0__","margeReplace","margeLinninr","margeMultiplication","imageDataBase","images","isBaseWhite","isOtherThread","margeExc","replace","linier","multiplication","func","isImageEmpty","threadImages","image","convertImageDataToObj","threadInit","beWhiteImage","mergeImages","width","height","imageData","addData","addWidth","addHeight","plainOffsetY","offsetY","plainOffsetX","offsetX","addOffsetY","endY","addOffsetX","endX","maxY","maxX","iy","addPixcelIndexY","ix","addPixcelIndexX","base","basePixcelIndex","addOne","addPixcelIndex","index","indexAdd","addOaddOffsetXne","trimByte","ImageCalcBase","_thread_thread__WEBPACK_IMPORTED_MODULE_0__","instances","wokerKey","workerKey","isCallFromWorker","arrayImageData","resultData","ImageResizer","_byteUtil__WEBPACK_IMPORTED_MODULE_0__","_imageCalcBase__WEBPACK_IMPORTED_MODULE_1__","threadCount","resizeAsLanczos","resizeAsByCubic","alpha","sin","PI","abs","sincLanczos","iamegData","distImage","resizeExc","rowCount","resizeExcWithThread","resizeAsByCubicExe","resizeAsLanczosExe","distBitmap","newWidth","newHeight","currentBitmap","currentWidth","currentHeight","promises","total","parLength","limitHeight","newDistData","Uint8ClampedArray","currentImageLen","newIData","j","newImageData","all","values","startIndex","resizeLanczos","resizeByCubic","originBitmap","sourceWidth","sourceHeight","resizeExecute","lanczosWeight","culcWeightByCubic","newWidthF","newHeightF","weightFunc","size","sw","sw4","swLimit","sh","shLimit","wf","hf","src","dist","sizeHalf","sizeHalfm1","threadOffsetY","threadEnd","wfy","y","startY","y32bitOffsetDist","wfx","g","b","startX","jy","weightY","y32bitOffset","jx","w","offset32bit","offset32bitDist"],"mappings":"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","file":"worker.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/dest/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 25);\n","export default class BinaryConverter {\n  static binaryString2ArrayBuffer(binaryString) {\n    return BinaryConverter.binaryString2Uint8Array(binaryString).buffer;\n  }\n  static arrayBuffer2BinaryString(buffer) {\n    return BinaryConverter.uint8Array2BinaryString(new Uint8Array(buffer));\n  }\n  static arrayBuffer2base64(buffer) {\n    return btoa(BinaryConverter.uint8Array2BinaryString(new Uint8Array(buffer)));\n  }\n  static arrayBuffer2DataURI(buffer, type = \"application/octet-stream\") {\n    const base64 = btoa(BinaryConverter.arrayBuffer2BinaryString(buffer));\n    return \"data:\" + type + \";base64,\" + base64;\n  }\n\n  static binaryString2Uint8Array(binaryString) {\n    const list = binaryString.split(\"\");\n    const rawLength = binaryString.length;\n    const array = new Uint8Array(new ArrayBuffer(rawLength));\n    for (let i = 0; i < rawLength; i++) {\n      array[i] = binaryString.charCodeAt(i);\n    }\n    return array;\n  }\n\n  static uint8Array2BinaryString(u8a) {\n    let retList = [];\n    for (let e of u8a) {\n      retList.push(String.fromCharCode(e));\n    }\n    return retList.join(\"\");\n  }\n\n  static binaryString2DataURI(binaryString, type = \"application/octet-stream\") {\n    return \"data:\" + type + \";base64,\" + btoa(binaryString);\n  }\n  static base642DataURI(base64, type = \"application/octet-stream\") {\n    return \"data:\" + type + \";base64,\" + base64;\n  }\n  static base642binaryString(base64) {\n    return atob(base64);\n  }\n  static base642ArrayBuffer(base64) {\n    return BinaryConverter.binaryString2ArrayBuffer(atob(base64));\n  }\n\n  static dataURI2BinaryString(dataURI) {\n    return atob(dataURI.split(\",\")[1]);\n  }\n  static dataURI2ArrayBuffer(dataURI) {\n    return BinaryConverter.binaryString2Uint8Array(atob(dataURI.split(\",\")[1])).buffer;\n  }\n\n  static uintArray2ArrayBuffer(uintArray) {\n    return uintArray.buffer;\n  }\n\n  static arrayBuffer2Uint8Array(arrayBuffer) {\n    return new Uint8Array(arrayBuffer);\n  }\n\n  static arrayBuffer2Uint16Array(arrayBuffer) {\n    return new Uint16Array(arrayBuffer);\n  }\n  static arrayBuffer2Uint32Array(arrayBuffer) {\n    return new Uint32Array(arrayBuffer)\n  }\n\n  static ArrayBuffer2Blob(val, type = \"application/octet-stream\") {\n    return new Blob([val], {type: type});\n  }\n  static readBlob(blob) {\n    const reader = new FileReader();\n    const promise = new Promise((resolve, reject) => {\n      reader.onload = eve => {\n        resolve(reader.result);\n      }\n      reader.onerror = eve => {\n        reject(reader.error);\n      }\n    })\n\n    return {\n      asArrayBuffer() {\n        reader.readAsArrayBuffer(blob);\n        return promise;\n      },\n      asBinaryString() {\n        reader.readAsBinaryString(blob);\n        return promise;\n      },\n      asDataURL() {\n        reader.readAsDataURL(blob);\n        return promise;\n      },\n      asText() {\n        reader.readAsText(blob);\n        return promise;\n      }\n    }\n  }\n}\n","export class ByteUtil {\n\n  static trimByte(byteX) {\n    const x = Math.floor(byteX);\n    const maxByte = x > 255 ?\n      255 :\n      x;\n    const minByte = maxByte < 0 ?\n      0 :\n      maxByte;\n    return minByte;\n  }\n}\n","const defaultWorker = \"worker.js\";\nconst defaultWorkerFromWorker = \"./worker.js\";\nexport class Thread {\n\tconstructor(workerJsPath = defaultWorker) {\n\t\tthis.worker = new Worker(workerJsPath);\n\t}\n\n\tpostMessage(key, dataMap) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\t// console.warn(\"trance key:\" + key + \"/\" + dataMap);\n\t\t\t// console.warn(dataMap);\n\t\t\tconst { transObject, tranceArray } = Thread.buildPostObj(key, dataMap);\n\t\t\t// console.warn(\"trance！ー！＝！＝！＝！:\" + tranceArray.length);\n\t\t\t// for (let trance of tranceArray) {\n\t\t\t// \tconsole.warn(\"trance:\" + trance.length + \"/\" + trance.byteLength);\n\t\t\t// }\n\t\t\t// console.warn(\"trance！ー！＝！＝！＝！:-----\");\n\n\t\t\ttry {\n\t\t\t\tthis.worker.postMessage(transObject, tranceArray);\n\t\t\t\tthis.worker.onmessage = (event) => {\n\t\t\t\t\tconst returendData = event.data;\n\t\t\t\t\t// console.warn(returendData);\n\t\t\t\t\tresolve(returendData);\n\t\t\t\t}\n\t\t\t\tthis.worker.onerror = (event) => {\n\t\t\t\t\tconsole.log(event);\n\t\t\t\t\tconst e = event;\n\t\t\t\t\tconsole.error(e.currentTarget);\n\t\t\t\t\tconsole.error(e.returnValue);\n\t\t\t\t\tconsole.error(e.srcElement);\n\t\t\t\t\tconsole.error(e.target);\n\t\t\t\t\tconsole.error(e.type);\n\t\t\t\t\tconsole.error(e.eventPhase);\n\t\t\t\t\tconsole.error(e.timeStamp);\n\t\t\t\t\tconsole.error(e.message);\n\t\t\t\t\tconsole.error(e.lineno);\n\t\t\t\t\tconsole.error(e.error);\n\t\t\t\t\treject(event);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tconsole.error(e);\n\t\t\t\tconsole.error(e.stack);\n\t\t\t}\n\t\t});\n\t}\n\n\tstatic buildPostObj(key, dataMap) {\n\t\tconst tranceArray = [];\n\t\tif (dataMap && typeof dataMap === \"string\") {\n\t\t\tdataMap.key = key;\n\t\t} else {\n\t\t\tdataMap = {\n\t\t\t\tkey: key\n\t\t\t};\n\t\t}\n\n\t\t// console.log(\"trance--buildPostObj A dataMap:\" + dataMap);\n\t\tThread.buildPostObjExec(dataMap, tranceArray);\n\t\t// console.log(\"trance--buildPostObj B tranceArray:\" + tranceArray.length);\n\t\treturn { transObject: dataMap, tranceArray };\n\t}\n\n\tstatic buildPostObjExec(dataMap, tranceArray) {\n\t\t// console.log(\"trance buildPostObjExec A1 dataMap:\" + dataMap);\n\t\tif (!dataMap) {\n\t\t\t// console.log(\"trance--buildPostObjExec dataMap:\" + dataMap);\n\t\t\t// nothig todo\n\t\t\treturn\n\t\t}\n\t\t// console.log(\"trance buildPostObjExec A2 dataMap:\" + dataMap);\n\t\tif (Array.isArray(dataMap)) {\n\t\t\t// console.log(\"trance buildPostObjExec array:\" + dataMap);\n\t\t\tlet count = 0;\n\t\t\tfor (let value of dataMap) {\n\t\t\t\tThread.buildPostObjExecParValue(count, value, tranceArray);\n\t\t\t\tcount++;\n\t\t\t}\n\t\t} else if (typeof dataMap === 'object' && Object.keys(dataMap)\n\t\t\t.length > 0) {\n\t\t\t// console.log(\"trance buildPostObjExec object:\" + dataMap);\n\t\t\tfor (let objKey in dataMap) {\n\t\t\t\tconst value = dataMap[objKey];\n\t\t\t\tif (value === undefined) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tThread.buildPostObjExecParValue(objKey, value, tranceArray);\n\t\t\t}\n\t\t} else {\n\t\t\t// console.log(\"trance buildPostObjExec other:\" + dataMap);\n\t\t\tThread.buildPostObjExecParValue(null, dataMap, tranceArray);\n\t\t}\n\t}\n\tstatic buildPostObjExecParValue(currentKey, value, tranceArray) {\n\t\t//「このデバッグ出力を消すと落ちる」\n\t\tconsole.log(\"trance buildPostObjExecParValue currentKey:\" + currentKey + \"/\" + tranceArray.length);\n\t\t// console.log(tranceArray);\n\t\tconst type = typeof value;\n\t\tlet isNotObject = false;\n\t\tif (!value) {\n\t\t\tisNotObject = true;\n\t\t} else if (value.buffer) {\n\t\t\ttranceArray.push(value.buffer);\n\t\t\tisNotObject = true;\n\t\t\t// console.log(\"trance buildPostObjExecParValue0 buffer:\" + value);\n\t\t} else if (value.byteLength) {\n\t\t\ttranceArray.push(value);\n\t\t\tisNotObject = true;\n\t\t\t// console.log(\"trance buildPostObjExecParValueA byteLength:\" + value);\n\t\t} else if (value instanceof ImageData) {\n\t\t\ttranceArray.push(value.data.buffer);\n\t\t\tisNotObject = true;\n\t\t\t// console.log(\"trance buildPostObjExecParValueB ImageData:\" + value);\n\t\t} else if (type === \"boolean\" || type === \"number\" || type === \"string\") {\n\t\t\tisNotObject = true;\n\t\t\t// console.log(\"trance buildPostObjExecParValueC primitive:\" + value);\n\t\t\t// } else {\n\t\t\t// \tconsole.log(\"trance buildPostObjExecParValueD other:\" + value);\n\t\t}\n\t\tif (!isNotObject && currentKey) {\n\t\t\t// console.log(\"trance buildPostObjExecParValueE add:\" + currentKey);\n\t\t\tThread.buildPostObjExec(value, tranceArray)\n\t\t}\n\n\t}\n\tclose() {\n\t\tthis.worker.terminate();\n\t}\n}","const workers = new Map();\nconst DEFAULT_WORKER = \"DEFAULT_WORKER\";\nexport class BaseWorker {\n\tstatic getWorkerInstance(key) {\n\t\tconst worker = workers.has(key) ? workers.get(key) : workers.get(DEFAULT_WORKER);\n\t\treturn worker;\n\t}\n\tconstructor(key = DEFAULT_WORKER) {\n\t\tthis.key = key;\n\t\tworkers.set(this.key, this);\n\t}\n\tgetWorkerKey() {\n\t\treturn this.key;\n\t}\n\tasync execute(srcData) {\n\t\tconst msg = \"hello world! now:\" + Date.now();\n\t\tconsole.log(msg);\n\t\treturn msg;\n\t}\n}","import { BaseWorker } from \"./baseWorker\";\nimport { ImageMerger } from \"../util/image/imageMerger\";\nimport { ImageResizer } from \"../util/image/imageResizer\";\nconst key = \"ImageWorker\";\nexport class ImageWorker extends BaseWorker {\n\tconstructor() {\n\t\tsuper(key);\n\t\tconst im = new ImageMerger();\n\t\tconst ir = new ImageResizer();\n\t\tthis.classes = {};\n\t\tthis.classes[im.getClassName()] = im;\n\t\tthis.classes[ir.getClassName()] = ir;\n\t\t// console.log(\"ImageWorker\")\n\t}\n\tstatic getKey() {\n\t\treturn key;\n\t}\n\tasync execute(srcData) {\n\t\t// console.log(\"ImageWorker execute key:\" + this.key);\n\t\t// console.log(srcData);\n\t\tconst result = await this.call(srcData)\n\t\t\t.catch((e) => {\n\t\t\t\tconsole.log(e)\n\t\t\t\tconsole.error(e.stack);\n\t\t\t});\n\t\treturn result;\n\t}\n\tasync call(srcData) {\n\t\tconst className = srcData.className;\n\t\tconst methodName = srcData.methodName;\n\t\tconst instance = this.classes[className];\n\t\tif (instance && instance[methodName]) {\n\t\t\ttry {\n\t\t\t\t// console.warn(\"ImageWorker execute call\");\n\t\t\t\tawait instance[methodName](srcData)\n\t\t\t\t\t.catch((e) => {\n\t\t\t\t\t\tconsole.log(e)\n\t\t\t\t\t\tconsole.error(e.stack);\n\t\t\t\t\t});\n\t\t\t} catch (e) {\n\t\t\t\tconsole.erroe(e);\n\t\t\t}\n\t\t}\n\t\treturn srcData\n\t};\n}\nconst aImageWorker = new ImageWorker();","import { BaseWorker } from \"./baseWorker\";\nconst cache = {};\nexport class WASMcaller extends BaseWorker {\n\tconstructor() {\n\t\tsuper(\"WASMcaller\");\n\t}\n\tasync execute() {\n\t\tconst msg = \"hello WASMcaller! now:\" + Date.now();\n\t\tconsole.log(msg);\n\t\tthis.call()\n\t\t\t.catch((e) => {\n\t\t\t\tconsole.log(e)\n\t\t\t});\n\t\treturn msg;\n\t}\n\tasync call() {\n\t\tconst response = await fetch('./wasm/sum.wasm');\n\t\tconst bytes = await response.arrayBuffer();\n\t\tconst module = await WebAssembly.instantiate(bytes, {})\n\t\tconst instance = module.instance;\n\t\tconsole.log(instance.exports.sum(21, 31));\n\t\tconst msg = \"hello WASMcaller! now:\" + Date.now();\n\t\tconsole.log(msg);\n\t};\n}\nif (!cache.aWASMcaller) {\n\tcache.aWASMcaller = new WASMcaller();\n}","import { Thread } from \"./util/thread/thread\";\nimport { BaseWorker } from \"./worker/baseWorker\";\nimport { ImageWorker } from \"./worker/imageWorker\";\nimport { WASMcaller } from \"./worker/WASMcaller\";\n////////////////////////////////////////////////////////\nexport default class DefaultWorker extends BaseWorker {\n\tconstructor() {\n\t\tsuper();\n\t}\n}\nconst defaultWorker = new DefaultWorker();\n////////////////////////////////////////////////////////\nonmessage = (event) => {\n\tconst srcData = event.data;\n\tconst key = srcData ? srcData.key : \"\";\n\t// console.log(\"!!!!!!!!!!!!!!!!!!!!hello Worker key:\" + key);\n\t// console.log(srcData);\n\tconst worker = BaseWorker.getWorkerInstance(key);\n\tworker.execute(srcData)\n\t\t.then((workerResult) => {\n\t\t\t// console.warn(workerResult);\n\t\t\tconst { transObject, tranceArray } = Thread.buildPostObj(key, workerResult);\n\t\t\t//\n\t\t\t// for (let trance of tranceArray) {\n\t\t\t// \tconsole.warn(\"worker trance:\" + trance.length + \"/\" + trance.byteLength);\n\t\t\t// }\n\t\t\tpostMessage(transObject, tranceArray);\n\t\t}, (error) => {\n\t\t\tconsole.error(error);\n\t\t\tconsole.error(error.stack);\n\t\t\tconst workerResult = data;\n\t\t\tconst { transObject, tranceArray } = Thread.buildPostObj(key, workerResult);\n\t\t\tpostMessage(transObject, tranceArray);\n\t\t})\n}","import { ImageCalcBase } from \"./imageCalcBase\";\nexport class ImageMerger extends ImageCalcBase {\n\tconstructor() {\n\t\tsuper(\"ImageMerger\");\n\t\tthis[\"margeReplace\"] = this.margeReplace;\n\t\tthis[\"margeLinninr\"] = this.margeLinninr;\n\t\tthis[\"margeMultiplication\"] = this.margeMultiplication;\n\t}\n\ttrimByte(byteX) {\n\t\tconst x = Math.floor(byteX);\n\t\tconst maxByte = x > 255 ?\n\t\t\t255 :\n\t\t\tx;\n\t\tconst minByte = maxByte < 0 ?\n\t\t\t0 :\n\t\t\tmaxByte;\n\t\treturn minByte;\n\t}\n\tasync margeReplace(imageDataBase, images, isBaseWhite, isOtherThread) {\n\t\tawait this.margeExc(imageDataBase, images, isBaseWhite, isOtherThread, \"margeReplace\", this.replace());\n\t\t// console.warn(\"margeReplace-imageDataBase\")\n\t\t// console.warn(imageDataBase)\n\t}\n\tasync margeLinninr(imageDataBase, images, isBaseWhite, isOtherThread) {\n\t\tawait this.margeExc(imageDataBase, images, isBaseWhite, isOtherThread, \"margeLinninr\", this.linier());\n\t}\n\tasync margeMultiplication(imageDataBase, images, isBaseWhite, isOtherThread) {\n\t\tawait this.margeExc(imageDataBase, images, isBaseWhite, isOtherThread, \"margeMultiplication\", this.multiplication());\n\t}\n\tasync margeExc(imageDataBase, images, isBaseWhite, isOtherThread, name, func) {\n\t\tlet isImageEmpty = true;\n\t\tif (!images && !isOtherThread) {\n\t\t\timages = imageDataBase.images\n\t\t\tisBaseWhite = imageDataBase.isBaseWhite\n\t\t\timageDataBase = imageDataBase.imageDataBase\n\t\t}\n\t\tconst threadImages = [];\n\t\tif (images) {\n\t\t\tfor (let image of images) {\n\t\t\t\tif (image && image.data && image.data.length > 0) {\n\t\t\t\t\tisImageEmpty = false;\n\t\t\t\t\tthreadImages.push(this.convertImageDataToObj(image));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (isImageEmpty) {\n\t\t\treturn;\n\t\t}\n\t\tif (isOtherThread) {\n\t\t\t// this.thread.\n\t\t\tthis.threadInit();\n\t\t\tconst dataMap = { imageDataBase, images: threadImages, isBaseWhite };\n\t\t\tconst result = await this.execute(name, dataMap)\n\t\t\t\t.catch((e) => {\n\t\t\t\t\tconsole.log(e)\n\t\t\t\t\tconsole.error(e.stack);\n\t\t\t\t});;\n\t\t\t// console.warn(\"margeExc-imageDataBase\")\n\t\t\t// console.warn(dataMap)\n\t\t\t// console.warn(imageDataBase)\n\t\t\treturn result;\n\t\t}\n\t\tthis.beWhiteImage(imageDataBase, isBaseWhite);\n\t\tthis.mergeImages(imageDataBase, images, func);\n\t}\n\tbeWhiteImage(imageDataBase, isBaseWhite) {\n\t\tif (isBaseWhite) {\n\t\t\tconst length = imageDataBase.data.length;\n\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\timageDataBase.data[i] = 255;\n\t\t\t}\n\t\t}\n\t}\n\tmergeImages(imageDataBase, images, func) {\n\t\tconst {\n\t\t\tdata,\n\t\t\twidth,\n\t\t\theight\n\t\t} = imageDataBase;\n\t\tfor (let imageData of images) {\n\t\t\tconst addData = imageData.data;\n\t\t\tconst addWidth = imageData.width;\n\t\t\tconst addHeight = imageData.height;\n\t\t\t//console.log(width+\"*\"+height+\"*4=\"+data.length+\"/\"+width+\"*\"+height+\"*4=\"+data.length)\n\t\t\tconst plainOffsetY = imageData.offsetY;\n\t\t\tconst plainOffsetX = imageData.offsetX;\n\t\t\tconst offsetY = imageData.offsetY && imageData.offsetY > 0 && imageData.offsetY < height ?\n\t\t\t\timageData.offsetY :\n\t\t\t\t!imageData.offsetY || imageData.offsetY < height ? 0 : height;\n\t\t\tconst offsetX = imageData.offsetX && imageData.offsetX > 0 && imageData.offsetX < width ?\n\t\t\t\timageData.offsetX :\n\t\t\t\t!imageData.offsetX || imageData.offsetX < width ? 0 : width;\n\t\t\tconst addOffsetY = offsetY + addHeight;\n\t\t\tconst endY = addOffsetY > height ?\n\t\t\t\theight :\n\t\t\t\taddOffsetY;\n\t\t\tconst addOffsetX = offsetX + addWidth;\n\t\t\tconst endX = addOffsetX > width ?\n\t\t\t\twidth :\n\t\t\t\taddOffsetX;\n\t\t\tlet maxY = 0;\n\t\t\tlet maxX = 0;\n\t\t\tlet count = 0;\n\t\t\t// console.error(\"offsetY:\"+offsetY+\"/offsetX:\"+offsetX);\n\t\t\tfor (let iy = offsetY; iy < endY; iy++) {\n\t\t\t\tconst addPixcelIndexY = iy - plainOffsetY;\n\t\t\t\tmaxY = addPixcelIndexY;\n\t\t\t\tfor (let ix = offsetX; ix < endX; ix++) {\n\t\t\t\t\tconst addPixcelIndexX = ix - plainOffsetX;\n\t\t\t\t\tconst basePixcelIndex = iy * width + ix;\n\t\t\t\t\tconst addPixcelIndex = addPixcelIndexY * addWidth + addPixcelIndexX;\n\t\t\t\t\tcount++;\n\t\t\t\t\tfunc(data, basePixcelIndex, addData, addPixcelIndex);\n\t\t\t\t\tmaxX = addPixcelIndexX;\n\t\t\t\t}\n\t\t\t}\n\t\t\t//console.log(\"count:\"+count+\"/maxX:\"+maxX+\"/maxY:\"+maxY+\"/w:\"+addWidth+\"/h:\"+addHeight+\"/offsetX:\"+offsetX+\"/offsetY:\"+offsetY+\"/endX:\"+endX+\"/endY:\"+endY+\"/width:\"+width+\"/height:\"+height)\n\t\t}\n\t}\n\n\treplace() {\n\t\treturn (base, basePixcelIndex, addOne, addPixcelIndex) => {\n\t\t\tconst index = basePixcelIndex * 4;\n\t\t\tconst indexAdd = addPixcelIndex * 4;\n\t\t\tbase[index] = addOne[indexAdd]\n\t\t\tbase[index + 1] = addOne[indexAdd + 1]\n\t\t\tbase[index + 2] = addOne[indexAdd + 2]\n\t\t\tbase[index + 3] = 255 //addOne[addPixcelIndex + 2]\n\t\t}\n\t}\n\tlinier() {\n\t\treturn (base, basePixcelIndex, addOne, addPixcelIndex) => {\n\t\t\tconst index = basePixcelIndex * 4;\n\t\t\tconst indexAdd = addPixcelIndex * 4;\n\t\t\tbase[index] = base[index] + addOaddOffsetXne[indexAdd]\n\t\t\tbase[index + 1] = base[index + 1] + addOne[indexAdd + 1]\n\t\t\tbase[index + 2] = base[index + 2] + addOne[indexAdd + 2]\n\t\t}\n\t}\n\tmultiplication() {\n\t\treturn (base, basePixcelIndex, addOne, addPixcelIndex) => {\n\t\t\tconst index = basePixcelIndex * 4;\n\t\t\tconst indexAdd = addPixcelIndex * 4;\n\t\t\tbase[index] = this.trimByte(base[index] * addOne[indexAdd] / 255);\n\t\t\tbase[index + 1] = this.trimByte(base[index + 1] * addOne[indexAdd + 1] / 255);\n\t\t\tbase[index + 2] = this.trimByte(base[index + 2] * addOne[indexAdd + 2] / 255);\n\t\t}\n\t}\n}","import { Thread } from \"../thread/thread\";\n// import { ImageWorker } from \"../../worker/imageWorker\";\nconst instances = {};\nconst wokerKey = \"ImageWorker\";\nexport class ImageCalcBase {\n\tconstructor(key) {\n\t\tthis.key = key;\n\t\tinstances[key] = this;\n\t\tthis.workerKey\n\t\t// this.thread = null;\n\t}\n\tthreadInit() {\n\t\t// if (!this.thread) {\n\t\t// \tthis.thread = new Thread();\n\t\t// }\n\t}\n\tasync execute(methodName, dataMap, isCallFromWorker) {\n\t\t// console.log(\"resizeExcWithThread. execute A ImageCalcBase methodName:\" + methodName + \"/dataMap:\" + dataMap);\n\t\tdataMap[\"methodName\"] = methodName;\n\t\tdataMap[\"className\"] = this.key;\n\t\tconst arrayImageData = {};\n\t\tfor (let key in dataMap) {\n\t\t\tconst data = dataMap[key];\n\t\t\tif (data instanceof ImageData) {\n\t\t\t\tarrayImageData[key] = data;\n\t\t\t}\n\t\t\tdataMap[key] = this.convertImageDataToObj(data);\n\t\t}\n\t\t// console.log(\"resizeExcWithThread. execute B ImageCalcBase methodName:\" + methodName + \"/dataMap:\" + dataMap);\n\t\tconst thread = new Thread();\n\t\tconst result = await thread.postMessage(wokerKey, dataMap)\n\t\t\t.catch((e) => { console.error(e) });\n\t\tif (result) {\n\t\t\tfor (let key in dataMap) {\n\t\t\t\t// console.log(\"execute key:\" + key);\n\t\t\t\tconst resultData = result[key];\n\t\t\t\t// console.log(resultData)\n\t\t\t\tif (!resultData || !resultData.data || resultData.data.byteLength === undefined) {\n\t\t\t\t\t// console.log(\"execute continue1 key:\" + key);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tconst data = dataMap[key];\n\t\t\t\t// console.log(data)\n\t\t\t\tif (!data || !data.data || data.data.byteLength === undefined) {\n\t\t\t\t\t// console.log(\"execute continue2 key:\" + key);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (resultData.data.byteLength > 0 && data.data.byteLength < 1) {\n\t\t\t\t\t// console.log(\"execute ok!! key:\" + key);\n\t\t\t\t\tdata.data = resultData.data;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// console.warn(\"resizeExcWithThread. execute C execute-dataMap\")\n\t\t// console.warn(dataMap)\n\t\t// console.warn(result)\n\t\t// console.warn(\"resizeExcWithThread. execute D execute-dataMap\")\n\t\treturn result;\n\t}\n\tgetClassName() {\n\t\treturn this.key;\n\t}\n\tstatic loadInstance(className) {\n\t\treturn instances(className);\n\t}\n\tconvertImageDataToObj(target) {\n\t\tif (target && target.data && target.data.length > 0 && target instanceof ImageData) {\n\t\t\treturn { width: target.width, height: target.height, data: target.data, offsetX: target.offsetX, offsetY: target.offsetY };\n\t\t}\n\t\treturn target;\n\t}\n}","import { ByteUtil } from \"./byteUtil\";\nimport { ImageCalcBase } from \"./imageCalcBase\";\nimport bc from \"../binaryConverter\";\nconst threadCount = 4;\nexport class ImageResizer extends ImageCalcBase {\n\tconstructor() {\n\t\tsuper(\"ImageResizer\");\n\t\tthis[\"resizeAsLanczos\"] = this.resizeAsLanczos;\n\t\tthis[\"resizeAsByCubic\"] = this.resizeAsByCubic;\n\t}\n\tculcWeightByCubic(alpha) {\n\t\treturn (x) => {\n\t\t\tlet result = 0;\n\t\t\tif (x <= 1) {\n\t\t\t\tresult = ((alpha + 2.0) * x * x * x) - ((alpha + 3.0) * x * x) + 1;\n\t\t\t} else if (x <= 2) {\n\t\t\t\tresult = (alpha * x * x * x) - (5.0 * alpha * x * x) + (8.0 * alpha * x) - (4.0 * alpha);\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t}\n\tsincLanczos(x) {\n\t\treturn Math.sin(x * Math.PI) / (x * Math.PI);\n\t}\n\n\tlanczosWeight(n = 3) {\n\t\treturn (d) => {\n\t\t\treturn d === 0 ?\n\t\t\t\t1 :\n\t\t\t\t(\n\t\t\t\t\tMath.abs(d) < n ?\n\t\t\t\t\tthis.sincLanczos(d) * this.sincLanczos(d / n) :\n\t\t\t\t\t0);\n\t\t}\n\t}\n\n\tasync resizeAsLanczos(iamegData, distImage, isOtherThread) {\n\t\t// console.log(\"resizeAsLanczos.resizeExcWithThread；iamegData:\" + iamegData);\n\t\treturn await this.resizeExc(iamegData, distImage, isOtherThread, \"resizeAsLanczos\")\n\t\t\t.catch((e) => {\n\t\t\t\tconsole.log(e)\n\t\t\t\tconsole.error(e.stack);\n\t\t\t});\n\t}\n\n\tasync resizeAsByCubic(iamegData, distImage, isOtherThread) {\n\t\t// console.log(\"resizeAsByCubic.resizeExcWithThread；iamegData:\" + iamegData);\n\t\tconst result = await this.resizeExc(iamegData, distImage, isOtherThread, \"resizeAsByCubic\")\n\t\t\t.catch((e) => {\n\t\t\t\tconsole.error(\"resizeAsByCubic resizeExcWithThread；iamegData\");\n\t\t\t\tconsole.error(e.stack);\n\t\t\t\tconsole.error(e);\n\t\t\t\tconsole.error(e.currentTarget);\n\t\t\t\tconsole.error(e.returnValue);\n\t\t\t\tconsole.error(e.srcElement);\n\t\t\t\tconsole.error(e.target);\n\t\t\t\tconsole.error(e.type);\n\t\t\t\tconsole.error(e.eventPhase);\n\t\t\t\tconsole.error(e.timeStamp);\n\t\t\t\tconsole.error(e.message);\n\t\t\t\tconsole.error(e.lineno);\n\t\t\t\tconsole.error(e.error);\n\t\t\t});\n\t\t// console.log(\"resizeAsByCubic.resizeExcWithThread； result:\" + result);\n\t\treturn result;\n\t}\n\n\tasync resizeExc(iamegData, distImage, isOtherThread, name) {\n\t\tif (isOtherThread) {\n\t\t\tif (!distImage) {\n\t\t\t\tdistImage = iamegData.distImage\n\t\t\t\tiamegData = iamegData.iamegData\n\t\t\t}\n\t\t\tthis.threadInit();\n\t\t\t// console.log(\"resizeExc execute.iamegData:\" + iamegData);\n\t\t\tconst result = await this.execute(name, { iamegData, distImage })\n\t\t\t\t.catch((e) => {\n\t\t\t\t\tconsole.log(e)\n\t\t\t\t\tconsole.error(e.stack);\n\t\t\t\t});\n\t\t\treturn result;\n\t\t} else {\n\t\t\t// console.log(\"resizeExc.iamegData:\" + iamegData);\n\t\t\tlet rowCount = null;\n\t\t\tlet offsetY = null;\n\t\t\tif (!distImage) {\n\t\t\t\tif (iamegData.rowCount) {\n\t\t\t\t\trowCount = iamegData.rowCount\n\t\t\t\t\toffsetY = iamegData.offsetY\n\t\t\t\t\tdistImage = iamegData.distImage\n\t\t\t\t\tiamegData = iamegData.iamegData\n\t\t\t\t\t// console.log(\"resizeExc resizeExcWithThread.offsetY:\" + offsetY + \"/rowCount:\" + rowCount);\n\t\t\t\t} else {\n\t\t\t\t\t// console.log(\"resizeExc resizeExcWithThread S1.iamegData:\" + iamegData + \"/name:\" + name);\n\t\t\t\t\tconst result = await this.resizeExcWithThread(iamegData, distImage, name)\n\t\t\t\t\t\t.catch((e) => {\n\t\t\t\t\t\t\tconsole.log(e)\n\t\t\t\t\t\t\tconsole.error(e.stack);\n\t\t\t\t\t\t});\n\t\t\t\t\t// console.log(\"resizeExc resizeExcWithThread S2.result:\" + result + \"/name:\" + name);\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// console.log(distImage);\n\t\t\tif (name === \"resizeAsByCubic\") {\n\t\t\t\t// console.log(\"resizeExc resizeExcWithThread T1.iamegData:\" + iamegData + \"/name:\" + name);\n\t\t\t\treturn this.resizeAsByCubicExe(iamegData, distImage, offsetY, rowCount);\n\t\t\t}\n\t\t\tif (name === \"resizeAsLanczos\") {\n\t\t\t\t// console.log(\"resizeExc resizeExcWithThread U1.iamegData:\" + iamegData + \"/name:\" + name);\n\t\t\t\treturn this.resizeAsLanczosExe(iamegData, distImage, offsetY, rowCount);\n\t\t\t}\n\t\t}\n\t}\n\tresizeExcWithThread(iamegData, distImage, name) {\n\t\t// console.log(\"resizeExcWithThread A .iamegData:\" + iamegData);\n\t\treturn new Promise((resolve, reject) => {\n\t\t\t// console.log(\"resizeExcWithThread. B iamegData:\" + iamegData);\n\t\t\tdistImage = iamegData.distImage\n\t\t\tiamegData = iamegData.iamegData\n\n\t\t\tthis.threadInit();\n\t\t\tconst distBitmap = distImage.data;\n\t\t\tconst newWidth = distImage.width;\n\t\t\tconst newHeight = distImage.height;\n\t\t\tconst currentBitmap = iamegData.data;\n\t\t\tconst currentWidth = iamegData.width;\n\t\t\tconst currentHeight = iamegData.height;\n\t\t\tconst promises = [];\n\t\t\tlet total = 0;\n\t\t\tconst parLength = Math.floor(newHeight / threadCount);;\n\t\t\t// console.log(\"resizeExcWithThread. C threadCount:\" + threadCount + \"/name:\" + name);\n\t\t\tfor (let i = 0; i < threadCount; i++) {\n\t\t\t\tconst limitHeight = (threadCount - 1 === i) ? newHeight - total : parLength;\n\t\t\t\t// todo Plus\n\t\t\t\tconst newData = new Uint8ClampedArray(newWidth * 4 * limitHeight);\n\t\t\t\tconst newDistData = { data: newData, width: newWidth, height: newHeight };\n\t\t\t\tconst currentImageLen = currentBitmap.length;\n\t\t\t\tconst newIData = new Uint8ClampedArray(currentImageLen);\n\t\t\t\t// console.log(\"resizeExcWithThread. D limitHeight:\" + limitHeight + \"/i:\" + i);\n\t\t\t\tfor (let j = 0; j < currentImageLen; j++) {\n\t\t\t\t\tnewIData[j] = currentBitmap[j];\n\t\t\t\t}\n\t\t\t\tconst newImageData = { data: newIData, width: currentWidth, height: currentHeight };\n\n\t\t\t\t// console.log(\"resizeExcWithThread. E limitHeight:\" + limitHeight + \"/i:\" + i);\n\t\t\t\tconst promise = this.execute(name, { iamegData: newImageData, distImage: newDistData, offsetY: total, rowCount: limitHeight });\n\t\t\t\ttotal += limitHeight;\n\t\t\t\tpromises.push(promise);\n\t\t\t}\n\t\t\tPromise.all(promises)\n\t\t\t\t.then((values) => {\n\t\t\t\t\t// console.log(\"resizeExcWithThread -----A--- values.length:\" + values.length);\n\t\t\t\t\t// console.log(values)\n\t\t\t\t\t// console.log(bc.arrayBuffer2base64(distBitmap.buffer));\n\t\t\t\t\tfor (let val of values) {\n\t\t\t\t\t\t// console.log(val)\n\t\t\t\t\t\tconst {\n\t\t\t\t\t\t\tdata,\n\t\t\t\t\t\t\twidth,\n\t\t\t\t\t\t\theight,\n\t\t\t\t\t\t\toffsetY,\n\t\t\t\t\t\t\trowCount\n\t\t\t\t\t\t} = val.distImage;\n\t\t\t\t\t\tconst startIndex = offsetY * 4 * newWidth;\n\t\t\t\t\t\t// const endIndex = (offsetY + rowCount) * 4 * newWidth;\n\t\t\t\t\t\t// let index = 0;\n\t\t\t\t\t\tdistBitmap.set(data, startIndex);\n\t\t\t\t\t\t// for (let j = startIndex; j < endIndex; j++) {\n\t\t\t\t\t\t// \tdistBitmap[j] = data[index];\n\t\t\t\t\t\t// \tindex++;\n\t\t\t\t\t\t// }\n\t\t\t\t\t\t// console.log(bc.arrayBuffer2base64(data.buffer));\n\t\t\t\t\t}\n\t\t\t\t\t// console.log(\"resizeExcWithThread -----B--- values.length:\" + values.length);\n\t\t\t\t\tresolve(distBitmap.buffer);\n\t\t\t\t})\n\t\t\t\t.catch((e) => {\n\t\t\t\t\tconsole.error(e.stack);\n\t\t\t\t\tconsole.error(e);\n\t\t\t\t\tconsole.error(e.currentTarget);\n\t\t\t\t\tconsole.error(e.returnValue);\n\t\t\t\t\tconsole.error(e.srcElement);\n\t\t\t\t\tconsole.error(e.target);\n\t\t\t\t\tconsole.error(e.type);\n\t\t\t\t\tconsole.error(e.eventPhase);\n\t\t\t\t\tconsole.error(e.timeStamp);\n\t\t\t\t\tconsole.error(e.message);\n\t\t\t\t\tconsole.error(e.lineno);\n\t\t\t\t\tconsole.error(e.error);\n\t\t\t\t\treject(e)\n\t\t\t\t});\n\n\t\t});\n\t}\n\tresizeAsLanczosExe(iamegData, distImage, offsetY, rowCount) {\n\t\tconst {\n\t\t\tdata,\n\t\t\twidth,\n\t\t\theight\n\t\t} = iamegData;\n\t\tconst distBitmap = distImage.data;\n\t\tconst newWidth = distImage.width;\n\t\tconst newHeight = distImage.height;\n\t\tdistImage.offsetY = offsetY;\n\t\tdistImage.rowCount = rowCount;\n\t\t// console.log(\"resizeAsByCubicExe offsetY:\" + offsetY + \"/newWidth:\" + newWidth + \"/rowCount:\" + rowCount + \"/newHeight:\" + newHeight);\n\t\tconst newData = new Uint8ClampedArray(this.resizeLanczos(data, width, height, newWidth, newHeight, distBitmap, offsetY, rowCount));\n\t\t// console.log(bc.arrayBuffer2base64(distBitmap.buffer));\n\t\treturn distImage\n\t}\n\tresizeAsByCubicExe(iamegData, distImage, offsetY, rowCount) {\n\t\tconst {\n\t\t\tdata,\n\t\t\twidth,\n\t\t\theight\n\t\t} = iamegData;\n\t\tconst distBitmap = distImage.data;\n\t\tconst newWidth = distImage.width;\n\t\tconst newHeight = distImage.height;\n\t\tdistImage.offsetY = offsetY;\n\t\tdistImage.rowCount = rowCount;\n\t\t// console.log(\"A offsetY:[\" + offsetY + \"]\" + \"--resizeAsByCubicExe A1 offsetY:\" + offsetY + \"/newWidth:\" + newWidth + \"/rowCount:\" + rowCount + \"/newHeight:\" + newHeight);\n\t\t// console.log(\"A1 offsetY:[\" + offsetY + \"]\" + bc.arrayBuffer2base64(data.buffer));\n\t\t// console.log(\"A2 offsetY:[\" + offsetY + \"]\" + bc.arrayBuffer2base64(distBitmap.buffer));\n\t\tconst newData = new Uint8ClampedArray(this.resizeByCubic(data, width, height, newWidth, newHeight, distBitmap, offsetY, rowCount));\n\t\t// console.log(\"B offsetY:[\" + offsetY + \"]\" + \"--resizeAsByCubicExe A2 offsetY:\" + offsetY + \"/newWidth:\" + newWidth + \"/rowCount:\" + rowCount + \"/newHeight:\" + newHeight);\n\t\t// console.log(\"B offsetY:[\" + offsetY + \"]\" + bc.arrayBuffer2base64(distBitmap.buffer));\n\t\treturn distImage\n\t}\n\t/////////////\n\tresize(iamegData, newWidth, newHeight, distImage) {\n\t\tconst {\n\t\t\tdata,\n\t\t\twidth,\n\t\t\theight\n\t\t} = iamegData;\n\t\tconst distBitmap = distImage.data;\n\t\tconst newData = new Uint8ClampedArray(this.resizeByCubic(data, width, height, newWidth, newHeight, distBitmap));\n\t\treturn distImage\n\t}\n\tresizeLanczos(originBitmap, sourceWidth, sourceHeight, newWidth, newHeight, distBitmap, offsetY, rowCount) {\n\t\treturn this.resizeExecute(originBitmap, sourceWidth, sourceHeight, newWidth, newHeight, this.lanczosWeight(3), 6, distBitmap, offsetY, rowCount);\n\t}\n\tresizeByCubic(originBitmap, sourceWidth, sourceHeight, newWidth, newHeight, distBitmap, offsetY, rowCount) {\n\t\treturn this.resizeExecute(originBitmap, sourceWidth, sourceHeight, newWidth, newHeight, this.culcWeightByCubic(-1.0), 4, distBitmap, offsetY, rowCount);\n\t}\n\t// TODO run with maltiThead\n\tresizeExecute(originBitmap, sourceWidth, sourceHeight, newWidthF, newHeightF, weightFunc, size, distBitmap, offsetY, rowCount) {\n\t\tconst newWidth = Math.floor(newWidthF);\n\t\tconst newHeight = Math.floor(newHeightF);\n\t\tconst sw = Math.floor(sourceWidth);\n\t\tconst sw4 = sw * 4;\n\t\tconst swLimit = sw - 1;\n\t\tconst sh = Math.floor(sourceHeight);\n\t\tconst sh4 = sh * 4;\n\t\tconst shLimit = sh - 1;\n\t\tconst wf = sw / newWidth;\n\t\tconst hf = sh / newHeight;\n\t\tconst src = originBitmap;\n\t\tconst dist = distBitmap ?\n\t\t\tdistBitmap :\n\t\t\tnew Uint8Array(newWidth * newHeight * 4);\n\t\tconst sizeHalf = size / 2;\n\t\tconst sizeHalfm1 = sizeHalf - 1;\n\t\tconst xMap = {};\n\t\tconst threadRowCount = rowCount ? rowCount : newHeight;\n\t\tconst threadOffsetY = offsetY ? offsetY : 0;\n\t\tconst threadEnd = threadOffsetY + threadRowCount;\n\t\tfor (let iy = threadOffsetY; iy < threadEnd; iy++) {\n\t\t\tconst wfy = hf * iy;\n\t\t\tconst y = Math.floor(wfy);\n\t\t\tconst startY = y - sizeHalfm1;\n\t\t\tconst endY = y + sizeHalf;\n\t\t\tconst y32bitOffsetDist = (iy - threadOffsetY) * 4 * newWidth;\n\t\t\tfor (let ix = 0; ix < newWidth; ix++) {\n\t\t\t\tconst wfx = wf * ix;\n\t\t\t\tconst x = Math.floor(wfx);\n\t\t\t\tlet r = 0;\n\t\t\t\tlet g = 0;\n\t\t\t\tlet b = 0;\n\t\t\t\tconst startX = x - sizeHalfm1;\n\t\t\t\tconst endX = x + sizeHalf;\n\t\t\t\tfor (let jy = startY; jy <= endY; jy++) {\n\t\t\t\t\tconst weightY = weightFunc(Math.abs(wfy - jy));\n\t\t\t\t\tconst sy = (jy < 0 || jy > shLimit) ?\n\t\t\t\t\t\ty :\n\t\t\t\t\t\tjy;\n\t\t\t\t\tconst y32bitOffset = sw4 * sy;\n\t\t\t\t\tfor (let jx = startX; jx <= endX; jx++) {\n\t\t\t\t\t\tconst w = weightFunc(Math.abs(wfx - jx)) * weightY;\n\t\t\t\t\t\tif (w === 0) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst sx = (jx < 0 || jx > swLimit) ?\n\t\t\t\t\t\t\tx :\n\t\t\t\t\t\t\tjx;\n\t\t\t\t\t\tconst offset32bit = y32bitOffset + sx * 4;\n\t\t\t\t\t\tr += src[offset32bit] * w;\n\t\t\t\t\t\tg += src[offset32bit + 1] * w;\n\t\t\t\t\t\tb += src[offset32bit + 2] * w;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// console.log(\"newHeight y32bitOffsetDist:\" + y32bitOffsetDist);\n\t\t\t\tconst offset32bitDist = y32bitOffsetDist + ix * 4;\n\t\t\t\tdist[offset32bitDist] = ByteUtil.trimByte(r);\n\t\t\t\tdist[offset32bitDist + 1] = ByteUtil.trimByte(g);\n\t\t\t\tdist[offset32bitDist + 2] = ByteUtil.trimByte(b);\n\t\t\t\tdist[offset32bitDist + 3] = 255;\n\t\t\t}\n\t\t}\n\t\t// console.log(\"newHeight:\" + dist.buffer);\n\t\t// console.log(dist.buffer);\n\t\treturn dist.buffer;\n\t}\n}"],"sourceRoot":""}